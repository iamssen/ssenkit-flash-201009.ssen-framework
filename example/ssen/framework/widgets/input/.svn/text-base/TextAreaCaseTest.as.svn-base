package ssen.framework.widgets.input {import ssen.framework.service.SimpleLauncher;import ssen.framework.widgets.core.IWidget;public class TextAreaCaseTest extends SimpleLauncher {	override protected function getApplication() : IWidget {		return new Case;	}}}import flashx.textLayout.edit.EditingMode;import ssen.core.draw.material.IDrawMaterialSet;import ssen.core.geom.Padding;import ssen.debug.TestContents;import ssen.debug.autocase.AutoCase;import ssen.debug.autocase.CaseState;import ssen.debug.autocase.ICaseCommand;import ssen.debug.autocase.Random;import ssen.debug.autocase.RandomBoolean;import ssen.debug.autocase.RandomInt;import ssen.framework.widgets.core.IWidget;import ssen.framework.widgets.core.WidgetState;import ssen.framework.widgets.input.TextArea;import ssen.styles.flour.scroll.FlourScrollBoxStyleSet;class Case extends AutoCase {	override protected function getWidget() : IWidget {		return new TA;	}	override protected function setWidget(widget : IWidget) : void {
		var ta : TextArea = TextArea(widget);		ta.setting_TextArea(sprite, 0, WidgetState.RUN, 300, 200, "", "tttttxxxx", null, new Padding(5, 5, 5, 5), 0xcccccc, EditingMode.READ_WRITE, new RandomBoolean().getRandom(), new RandomBoolean().getRandom(), new RandomBoolean().getRandom(), new RandomBoolean().getRandom());
	}	override protected function getSettedTimeCommand() : Vector.<ICaseCommand> {		var cmds : Vector.<ICaseCommand> = new Vector.<ICaseCommand>();		cmds.push(new CaseState("x", new RandomInt(10, 300)));		cmds.push(new CaseState("y", new RandomInt(10, 300)));		cmds.push(new CaseState("width", new RandomInt(150, 400)));		cmds.push(new CaseState("height", new RandomInt(150, 400)));		cmds.push(new CaseState("scrollV", new RandomInt(1, 300)));		cmds.push(new CaseState("scrollH", new RandomInt(1, 300)));		cmds.push(new CaseState("text", new Random([TestContents.getLongText(), "aaaaaaa", TestContents.getLongText(), "aaaaa\nbbbbb"])));		return cmds;	}	override protected function getRegisteredTimeCommand() : Vector.<ICaseCommand> {		return null;	}	override protected function getInteractions() : Vector.<String> {		return null;	}	override protected function traceState() : void {		str("state", ["width", "height", "x", "y", "scrollV", "scrollH", "text", "maxScrollV", "maxScrollH", "minScrollV", "minScrollH", "totalScrollV", "totalScrollH", "scrollVEnabled", "scrollHEnabled"]);	}}class TA extends TextArea {	override protected function getMaterial() : IDrawMaterialSet {
		return FlourScrollBoxStyleSet.box;
	}
	override protected function getPadding() : Padding {
		return new Padding(1, 1, 1, 1);
	}
}